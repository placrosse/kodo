
/// @brief Type requirements for BlockPartitioning compatible types.
class block_partitioning
{
public:

    /// Default constructor
    block_partitioning();

    /// Constructor
    /// @param max_symbols the maximum number of symbols in a block
    /// @param max_symbol_size the size in bytes of a symbol
    /// @param object_size the size in bytes of the whole object
    block_partitioning(uint32_t max_symbols, uint32_t max_symbol_size,
                       uint32_t object_size);

    /// @ingroup block_partitioning_type
    /// @param block_id the block index
    /// @return the number of symbols in a specific block
    uint32_t symbols(uint32_t block_id) const;

    /// @ingroup block_partitioning_type
    /// @param block_id the block index
    /// @return the size of a symbol in a specific block
    uint32_t symbol_size(uint32_t block_id) const;

    /// @ingroup block_partitioning_type
    /// @param block_id the block index
    /// @return the size of a specific block in bytes
    uint32_t block_size(uint32_t block_id) const;

    /// @ingroup block_partitioning_type
    /// @param block_id the block index
    /// @return the offset in bytes to the start of a specific block
    uint32_t byte_offset(uint32_t block_id) const;

    /// @ingroup block_partitioning_type
    /// @param block_id the block index
    /// @return the number of bytes used in a specific block
    uint32_t bytes_used(uint32_t block_id) const;

    /// @ingroup block_partitioning_type
    /// @return the total number of blocks in the object
    uint32_t blocks() const;

    /// @ingroup block_partitioning_type
    /// @return the size of the object being partitioned
    uint32_t object_size() const;

    /// @ingroup block_partitioning_type
    /// @return the total number of symbols in the entire object
    uint32_t total_symbols() const;

    /// @ingroup block_partitioning_type
    /// @return The total number of bytes needed to cover all blocks
    uint32_t total_block_size() const;

};
